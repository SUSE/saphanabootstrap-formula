{%- from "hana/map.jinja" import hana with context -%}
{%- set host = grains['host'] %}

{%- for node in hana.nodes %}
{%- if node.host == host and node.secondary is defined and node.scenario_type.lower() == 'cost-optimized' %}

{%- set dbsid = node.sid.lower() %}
{%- set dbinst = '{:0>2}'.format(node.instance) %}

{%- for prim_node in hana.nodes %}
{%- if node.secondary.remote_host == prim_node.host and prim_node.primary is defined %}

{%- set dbuser = prim_node.primary.userkey.user_name %}
{%- set dbpwd = prim_node.password %}
{%- set dbversion = salt['hana.get_version'](sid=dbsid, inst=dbinst, password=dbpwd) %}
{%- if salt['pkg.version_cmp'](dbversion, '2.0') < 0 %}
    {%- set dbport = ('3'~ dbinst ~'15')|int %}
{%- else %}
    {%- set dbport = ('3'~ dbinst ~'13')|int %}
{%- endif -%}

"""
HA/DR hook {haDrCostOptMem} for method srPostTakeover()

This hook is used when deploying a "Cost Optimized Scenario".
It makes sure to reconfigure the primary database after a takeover.

The following changes to global.ini are needed to activea this hook.

[ha_dr_provider_{haDrCostOptMem}]
provider = {haDrCostOptMem}
path = /hana/shared/srHook/
execution_order = 2

For all hooks, 0 must be returned in case of success.

Set the following variables:
* dbinst Instance Number [e.g. 00 - 99 ]
* dbuser Username [ e.g. SYSTEM ]
* dbpwd
* user password [ e.g. SLES4sap ]
* dbport port where db listens for SQL connctions [e.g 30013 or 30015]
"""
#
# parameter section
#
dbuser="{{ dbuser }}"
dbpwd="{{ dbpwd }}"
dbinst="{{ dbinst }}"
dbport="{{ dbport }}"

{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}

#
# prepared SQL statements to remove memory allocation limit
#    and pre-load of column tables
#
stmnt1 = "ALTER SYSTEM ALTER CONFIGURATION ('global.ini','SYSTEM') UNSET ('memorymanager','global_allocation_limit') WITH RECONFIGURE"
stmnt2 = "ALTER SYSTEM ALTER CONFIGURATION ('global.ini','SYSTEM') UNSET ('system_replication','preload_column_tables') WITH RECONFIGURE"
#
# loading classes and libraries
#
import os, time
from hdbcli import dbapi
from hdb_ha_dr.client import HADRBase, Helper
#
# class definition srCostOptMemConfig
#
class srCostOptMemConfig(HADRBase):
  def __init__(self, *args, **kwargs):
       # delegate construction to base class
       super(srCostOptMemConfig, self).__init__(*args, **kwargs)

  def about(self):
      return {"provider_company" : "<customer>",
              "provider_name" : "srCostOptMemConfig", # provider name = class name
              "provider_description" : "Replication takeover script to set parameters to default.",
              "provider_version" : "1.0"}

  def postTakeover(self, rc, **kwargs):
      """Post takeover hook."""
      self.tracer.info("%s.postTakeover method called with rc=%s" % (self.__class__.__name__, rc))
      if rc == 0:
         # normal takeover succeeded
         conn = dbapi.connect('localhost',dbport,dbuser,dbpwd)
         cursor = conn.cursor()
         cursor.execute(stmnt1)
         cursor.execute(stmnt2)
         return 0
      elif rc == 1:
          # waiting for force takeover
          conn = dbapi.connect('localhost',dbport,dbuser,dbpwd)
          cursor = conn.cursor()
          cursor.execute(stmnt1)
          cursor.execute(stmnt2)
          return 0
      elif rc == 2:
          # error, something went wrong
          return 0
