{%- set data = pillar.cluster.configure.template.parameters %}
{%- set sid = data.sid.upper() %}
{%- set instance = '{:0>2}'.format(data.instance) %}
{%- set cloud_provider = grains['cloud_provider'] %}
{%- set monitoring_enabled = pillar.cluster.monitoring_enabled|default(False) %}

#
# defaults
#

rsc_defaults \
    resource-stickiness="1000" \
    migration-threshold="5000"

op_defaults \
    timeout="600"

{%- if cloud_provider not in ["amazon-web-services", "google-cloud-platform"] %}
{%- set nic = "nic="~pillar.cluster.interface|json if pillar.cluster.interface is defined else "" %}

primitive rsc_ip_{{ sid }}_HDB{{ instance }} ocf:heartbeat:IPaddr2 \
    params \
    ip="{{ data.virtual_ip }}" cidr_netmask="{{ data.virtual_ip_mask|default("32") }}" {{ nic }} \
    op start timeout="20" op stop timeout="20" \
    op monitor interval="10" timeout="20"
{%- endif %}

# Platform dependant (stonith, virtual ip address, cib options, etc) resource
{%- if cloud_provider == "amazon-web-services" %}

property $id="cib-bootstrap-options" \
    stonith-enabled="true" \
    stonith-action="off" \
    stonith-timeout="150s"

primitive rsc_aws_stonith_{{ sid }}_HDB{{ instance }} stonith:external/ec2 \
    params tag={{ data.instance_tag }} profile={{ data.cluster_profile }} \
    op start interval=0 timeout=180 \
    op stop interval=0 timeout=180 \
    op monitor interval=120 timeout=60 \
    meta target-role=Started

primitive rsc_aws_vip_{{ sid }}_HDB{{ instance }} ocf:suse:aws-vpc-move-ip \
    params ip={{ data.virtual_ip }} routing_table={{ data.route_table }} \
    interface={{ pillar.cluster.interface|default('eth0')|json }} profile={{ data.cluster_profile }} \
    op start interval=0 timeout=180 \
    op stop interval=0 timeout=180 \
    op monitor interval=60 timeout=60

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }} 2000: rsc_aws_vip_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- elif cloud_provider == "google-cloud-platform" %}

# This stonith resource will be duplicated for each node in the cluster
primitive rsc_gcp_stonith_{{ sid }}_HDB{{ instance }}_{{ grains['host'] }} stonith:fence_gce \
    params plug={{ grains['gcp_instance_name'] }} pcmk_host_map="{{ grains['host'] }}:{{ grains['gcp_instance_name'] }}" \
    meta target-role=Started

primitive rsc_gcp_vip_{{ sid }}_HDB{{ instance }} ocf:heartbeat:gcp-vpc-move-route \
    params ip={{ data.virtual_ip }} vpc_network={{ data.vpc_network_name }} route_name={{ data.route_name }} \
    op start interval=0 timeout=180 \
    op stop interval=0 timeout=180 \
    op monitor interval=60 timeout=60

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }} 2000: rsc_gcp_vip_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- elif cloud_provider == "microsoft-azure" %}

primitive rsc_socat_{{ sid }}_HDB{{ instance }} azure-lb \
    params port=625{{ instance }} \
    op monitor timeout="20" interval="10" depth="0"

group g_ip_{{ sid }}_HDB{{ instance }} rsc_ip_{{ sid }}_HDB{{ instance }} rsc_socat_{{ sid }}_HDB{{ instance }}

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }} 4000: g_ip_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- else %}
colocation col_saphana_ip_{{ sid }}_HDB{{ instance }} 2000: rsc_ip_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- endif %}

# SAP HANA resources

primitive rsc_SAPHanaTopology_{{ sid }}_HDB{{ instance }} ocf:suse:SAPHanaTopology \
    params \
    SID="{{ sid }}" \
    InstanceNumber="{{ instance }}" \
    op monitor interval="10" timeout="600" \
    op start interval="0" timeout="600" \
    op stop interval="0" timeout="300"

clone cln_SAPHanaTopology_{{ sid }}_HDB{{ instance }} rsc_SAPHanaTopology_{{ sid }}_HDB{{ instance }} \
    meta is-managed="true" clone-node-max="1" interleave="true"

primitive rsc_SAPHana_{{ sid }}_HDB{{ instance }} ocf:suse:SAPHana \
    params \
    SID="{{ sid }}" \
    InstanceNumber="{{ instance }}" \
    PREFER_SITE_TAKEOVER="{{ data.prefer_takeover }}" \
    AUTOMATED_REGISTER="{{ data.auto_register }}" \
    DUPLICATE_PRIMARY_TIMEOUT="7200" \
    op start interval="0" timeout="3600" \
    op stop interval="0" timeout="3600" \
    op promote interval="0" timeout="3600" \
    op monitor interval="60" role="Master" timeout="700" \
    op monitor interval="61" role="Slave" timeout="700"

ms msl_SAPHana_{{ sid }}_HDB{{ instance }} rsc_SAPHana_{{ sid }}_HDB{{ instance }} \
    meta clone-max="2" clone-node-max="1" interleave="true"

order ord_SAPHana_{{ sid }}_HDB{{ instance }} Optional: cln_SAPHanaTopology_{{ sid }}_HDB{{ instance }} msl_SAPHana_{{ sid }}_HDB{{ instance }}

{%- if data.cost_optimized_parameters is defined %}
{%- set qas_sid = data.cost_optimized_parameters.sid.upper() %}
{%- set qas_instance = '{:0>2}'.format(data.cost_optimized_parameters.instance) %}
{%- set qas_remote_host = data.cost_optimized_parameters.remote_host %}

#
# non-production HANA
#

primitive rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }} ocf:heartbeat:SAPDatabase \
    params DBTYPE="HDB" SID="{{ qas_sid }}" \
    MONITOR_SERVICES="hdbindexserver|hdbnameserver" \
    op start interval="0" timeout="600" \
    op monitor interval="120" timeout="700" \
    op stop interval="0" timeout="300" \
    meta priority="100"

location loc_{{ qas_sid }}_never_on_{{ qas_remote_host }} rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }} -inf: {{ qas_remote_host }}

colocation col_{{ qas_sid }}_never_with_{{ sid }}-ip -inf: rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }}:Started \
   rsc_ip_{{ sid }}_HDB{{ instance }}

order ord_{{ qas_sid }}_stop_before_{{ sid }}-promote Mandatory: rsc_SAP_{{ qas_sid }}_HDB{{ qas_instance }}:stop \
   msl_SAPHana_{{ sid }}_HDB{{ instance }}:promote

{%- endif %}

# Active/Active HANA resources

{%- if data.virtual_ip_secondary is defined %}
{%- if cloud_provider not in ["amazon-web-services", "google-cloud-platform"] %}

primitive rsc_ip_{{ sid }}_HDB{{ instance }}_readenabled ocf:heartbeat:IPaddr2 \
    op monitor interval="10s" timeout="20s" \
    params ip={{ data.virtual_ip_secondary }}

{%- elif cloud_provider == "amazon-web-services" %}

primitive rsc_ip_{{ sid }}_HDB{{ instance }}_readenabled ocf:suse:aws-vpc-move-ip \
    params ip={{ data.virtual_ip_secondary }} routing_table={{ data.route_table }} \
    interface={{ pillar.cluster.interface|default('eth0')|json }} profile={{ data.cluster_profile }} \
    op start interval=0 timeout=180 \
    op stop interval=0 timeout=180 \
    op monitor interval=60 timeout=60

{%- elif cloud_provider == "google-cloud-platform" %}

primitive rsc_ip_{{ sid }}_HDB{{ instance }}_readenabled ocf:heartbeat:gcp-vpc-move-route \
    params ip={{ data.virtual_ip_secondary }} vpc_network={{ data.vpc_network_name }} route_name={{ data.route_name_secondary }} \
    op start interval=0 timeout=180 \
    op stop interval=0 timeout=180 \
    op monitor interval=60 timeout=60

{%- endif %}

{%- if cloud_provider == "microsoft-azure" %}

primitive rsc_socat_{{ sid }}_HDB{{ instance }}_readenabled azure-lb \
    params port=626{{ instance }} \
    op monitor timeout="20" interval="10" depth="0"

group g_ip_{{ sid }}_HDB{{ instance }}_readenabled \
    rsc_ip_{{ sid }}_HDB{{ instance }}_readenabled rsc_socat_{{ sid }}_HDB{{ instance }}_readenabled

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }}_readenabled 4000: \
    g_ip_{{ sid }}_HDB{{ instance }}_readenabled:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Slave

{%- else %}

colocation col_saphana_ip_{{ sid }}_HDB{{ instance }}_readenabled 2000: \
    rsc_ip_{{ sid }}_HDB{{ instance }}_readenabled:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Slave

{%- endif %}
{%- endif %}

# hanadb_exporter resource

{%- if monitoring_enabled %}

primitive rsc_exporter_{{ sid }}_HDB{{ instance }} systemd:prometheus-hanadb_exporter@{{ sid }}_HDB{{ instance }} \
    op start interval=0 timeout=100 \
    op stop interval=0 timeout=100 \
    op monitor interval=10 \
    meta target-role=Started

colocation col_exporter_{{ sid }}_HDB{{ instance }} +inf: rsc_exporter_{{ sid }}_HDB{{ instance }}:Started msl_SAPHana_{{ sid }}_HDB{{ instance }}:Master

{%- endif %}
